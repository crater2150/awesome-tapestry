#!/bin/zsh

WALLPAPERRC=$(awesome-client <<<'return require("awful").util.getdir("config") .. "/tapestry/wallpaperrc.lua"' | sed -e 's/.*string "\(.*\)"/\1/')

mode="-f"

offset_x=(-x 0)
offset_y=(-y 0)
background=(-b "theme.bg_default")

zparseopts -E -D -K \
	h=help -help=help \
	c=mode -centered=mode \
	f=mode -fit=mode \
	t=mode -tiled=mode \
	m=mode -maximized=mode -fill=mode \
	i=mode -ignore-aspect=mode \
	b:=background -bgcolor:=background \
	x:=offset_x y:=offset_y \
	s:=screen -screen:=screen \
	r=reload -reload=reload w=wipe -wipe=wipe \
	q=query -query=query


wall=${1:a}

if [[ -n "$help" ]] || [[ -z "$wall" && -z "$reload" && -z "$query" ]]; then
	echo "Usage: tapestry [opts] file
Options:
  Common:
    -s, --screen         screen number
    -r, --reload         reload from wallpaperrc
    -w, --wipe           wipe all current wallpaper settings and rewrite
                         wallpaperrc.
    -q, --query          output current wallpaperrc

  Modes:
    -c, --centered       center image on screen
    -f, --fit (default)  scale image to fit screen (adding bars if needed)
    -t, --tiled          repeat image, if it is smaller than the screen
	-m, --maximized      like fit, but scale up evenly to fill screen completely
	-i, --ignore-aspect  like fit, but stretch image to fill screen completely

  For --centered, --fit:
    -b, --bgcolor        background color for parts not covered by wallpaper

  For --tiled, --maximized:
    -x                   horizontal offset
    -y                   vertical offset
"
	exit 1
fi

if [[ -n "$reload" ]]; then
	if [[ ! -e $WALLPAPERRC ]]; then
		echo "No wallpaperrc found"
		exit 1
	else
		echo "require(\"tapestry\")()" | awesome-client
		exit 0
	fi
fi

if [[ -n "$query" ]]; then
	if [[ ! -e $WALLPAPERRC ]]; then
		echo "No wallpaperrc found"
	else
		< $WALLPAPERRC
	fi
	if [[ -z "$wall" ]]; then exit 0; fi
fi

if [[ "${background[2]}" != "theme.bg_default" ]]; then
	background[2]="'${background[2]}'"
fi

case "$mode" in
	-c|--centered)
		method=centered
		extra_args=", ${background[2]}"
		;;
	-f|--fit)
		method=fit
		extra_args=", ${background[2]}"
		;;
	-t|--tiled)
		method=tiled
		extra_args=", {x = ${offset_x[2]}, y = ${offset_y[2]}}"
		;;
	-m|--maximized|--fill)
		method=maximized
		extra_args=", false, {x = ${offset_x[2]}, y = ${offset_y[2]}}"
		;;
	-i|--ignore-aspect)
		method=maximized
		extra_args=", true"
		;;
	*) exit ;;
esac

if [[ -n $screen ]]; then key="[${screen[2]}]"; else key="default"; fi

new_entry="\t$key = {gears.wallpaper.${method}, '$wall'$extra_args},"

if [[ -e $WALLPAPERRC && -z $wipe ]]; then
	current_walls=(${(@f)"$(sed -n -e '/^return/,/^}$/p' $WALLPAPERRC)"})
	current_walls=($current_walls[2,-2])
	for i in {1..$#current_walls}; do
		if [[ $current_walls[$i] =~ "${key/\[/\\[} ?=" ]]; then
			unset "current_walls[$i]"
		fi
	done
	current_walls+=$new_entry
	current_walls=($current_walls)
else
	current_walls=("$new_entry")
fi

if [[ ! -d ${WALLPAPERRC:h} ]]; then mkdir -p ${WALLPAPERRC:h}; fi

{
  echo "-- wallpaperrc generated by tapestry"
  echo "local gears = require(\"gears\")"
  echo "return {"
  echo ${(F)current_walls} | sort -u -k1,2
  echo "}"
} > $WALLPAPERRC

echo "require(\"tapestry\")()" | awesome-client
